import java.util.Arrays;
import java.util.Random;

public class MergeSort {
    public static void mergeSort(int[] z) {
        if (z.length > 1) {
            int mid = z.length / 2;
            int[] leftHalf = Arrays.copyOfRange(z, 0, mid);
            int[] rightHalf = Arrays.copyOfRange(z, mid, z.length);

            mergeSort(leftHalf);
            mergeSort(rightHalf);

            int i = 0, j = 0, k = 0;
            while (i < leftHalf.length && j < rightHalf.length) {
                if (leftHalf[i] < rightHalf[j]) {
                    z[k] = leftHalf[i];
                    i++;
                } else {
                    z[k] = rightHalf[j];
                    j++;
                }
                k++;
            }

            while (i < leftHalf.length) {
                z[k] = leftHalf[i];
                i++;
                k++;
            }

            while (j < rightHalf.length) {
                z[k] = rightHalf[j];
                j++;
                k++;
            }
        }
    }

    public static double[] evaluateMergeSort(int tamanho) {
        double[] results = new double[3];

        double[] tempos = new double[5];
        int[] trocas = new int[5];
        int[] iteracoes = new int[5];

        for (int i = 0; i < 5; i++) {
            int[] vetor = new int[tamanho];
            Random random = new Random();

            for (int j = 0; j < tamanho; j++) {
                vetor[j] = random.nextInt(1000) + 1;
            }

            long inicio = System.currentTimeMillis();
            mergeSort(vetor);
            long fim = System.currentTimeMillis();

            double tempoExecucao = (fim - inicio) / 1000.0;

            tempos[i] = tempoExecucao;
            trocas[i] = 0; // Merge Sort doesn't perform swaps directly
            iteracoes[i] = vetor.length - 1; // Number of iterations in Merge Sort

            results[0] += tempoExecucao;
            results[1] += trocas[i];
            results[2] += iteracoes[i];
        }

        results[0] /= 5.0; // Average time
        results[1] = 0;    // No swaps in Merge Sort
        results[2] /= 5.0; // Average iterations

        return results;
    }

    public static void main(String[] args) {
        int[] tamanhos = {50, 500, 1000, 5000, 10000};

        for (int tamanho : tamanhos) {
            System.out.println("Tamanho do vetor: " + tamanho);

            double[] mergeResult = evaluateMergeSort(tamanho);
            System.out.println("Merge Sort: Tempo médio = " + mergeResult[0] + "s, Trocas médias = " + mergeResult[1] + ", Iterações médias = " + mergeResult[2]);
        }
    }
}
