import random
import time

def merge_sort(z):
    if len(z) > 1:
        mid = len(z) // 2
        left_half = z[:mid]
        right_half = z[mid:]

        merge_sort(left_half)
        merge_sort(right_half)

        i = j = k = 0

        while i < len(left_half) and j < len(right_half):
            if left_half[i] < right_half[j]:
                z[k] = left_half[i]
                i += 1
            else:
                z[k] = right_half[j]
                j += 1
            k += 1

        while i < len(left_half):
            z[k] = left_half[i]
            i += 1
            k += 1

        while j < len(right_half):
            z[k] = right_half[j]
            j += 1
            k += 1

def avaliar_merge_sort(tamanho):
    tempos = []
    trocas = []
    iteracoes = []

    for _ in range(5):
        vetor = [random.randint(1, 1000) for _ in range(tamanho)]

        inicio = time.time()
        merge_sort(vetor)
        fim = time.time()

        tempo_execucao = fim - inicio
        num_trocas = 0  # Merge Sort não faz trocas diretamente
        num_iteracoes = len(vetor) - 1  # Número de iterações no Merge Sort

        tempos.append(tempo_execucao)
        trocas.append(num_trocas)
        iteracoes.append(num_iteracoes)

    media_tempo = sum(tempos) / 5
    media_iteracoes = sum(iteracoes) / 5

    return media_tempo, 0, media_iteracoes

# Tamanhos de vetor a serem testados
tamanhos = [50, 500, 1000, 5000, 10000]

for tamanho in tamanhos:
    print(f"Tamanho do vetor: {tamanho}")

    merge_result = avaliar_merge_sort(tamanho)
    print(f"Merge Sort: Tempo médio = {merge_result[0]}, Trocas médias = {merge_result[1]}, Iterações médias = {merge_result[2]}")
