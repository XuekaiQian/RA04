import java.util.Arrays;
import java.util.Random;

public class MergeSort {
    public static void mergeSort(int[] z) {
        // Implementa o algoritmo de ordenação Merge Sort
    }

    public static double[] avaliaMergeSort(int tamanho) {
        double[] results = new double[3];

        double[] tempos = new double[5];
        int[] trocas = new int[5];
        int[] iteracoes = new int[5];

        for (int i = 0; i < 5; i++) {
            int[] vetor = new int[tamanho];
            Random random = new Random();

            for (int j = 0; j < tamanho; j++) {
                vetor[j] = random.nextInt(1000) + 1;
            }

            long inicio = System.currentTimeMillis();
            mergeSort(vetor);
            long fim = System.currentTimeMillis();

            double tempoExecucao = (fim - inicio) / 1000.0;

            tempos[i] = tempoExecucao;
            trocas[i] = 0;
            iteracoes[i] = vetor.length - 1;

            results[0] += tempoExecucao;
            results[1] += trocas[i];
            results[2] += iteracoes[i];
        }

        results[0] /= 5.0;
        results[1] = 0;
        results[2] /= 5.0;
        return results;
    }

    public static void main(String[] args) {
        int[] tamanhos = {50, 500, 1000, 5000, 10000};

        int numCores = Runtime.getRuntime().availableProcessors();
        System.out.println("Número de núcleos da CPU: " + numCores);

        for (int tamanho : tamanhos) {
            System.out.println("Tamanho do vetor: " + tamanho);

            double[] mergeResult = avaliaMergeSort(tamanho);
            System.out.println("Merge Sort: Tempo médio = " + mergeResult[0] + "s, Trocas médias = " + mergeResult[1] + ", Iterações médias = " + mergeResult[2]);
        }
    }
}
